// services/leaderboard_service.js

const { db } = require('./firebase_service');
const config = require('../config');

// ржкрзБрж░рж╕рзНржХрж╛рж░ ржмрж┐рждрж░ржгрзЗрж░ ржорзВрж▓ рж▓ржЬрж┐ржХ
async function processWeeklyLeaderboard(bot) {
  console.log('рж╕рж╛ржкрзНрждрж╛рж╣рж┐ржХ рж▓рж┐ржбрж╛рж░ржмрзЛрж░рзНржб ржкрзНрж░ржХрзНрж░рж┐рзЯрж╛ рж╢рзБрж░рзБ рж╣ржЪрзНржЫрзЗ...');

  const usersRef = db.collection('users');
  const snapshot = await usersRef.orderBy('weeklyReferralCount', 'desc').limit(10).get();

  if (snapshot.empty) {
    console.log('рж▓рж┐ржбрж╛рж░ржмрзЛрж░рзНржбрзЗ ржХрзЛржирзЛ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржирзЗржЗред ржкрзНрж░ржХрзНрж░рж┐рзЯрж╛ рж╢рзЗрж╖ред');
    return;
  }

  const winners = [];
  snapshot.forEach(doc => {
    winners.push({ id: doc.id, ...doc.data() });
  });

  // рзз. ржмрж┐ржЬрзЯрзАржжрзЗрж░ ржкрзБрж░рж╕рзНржХрж╛рж░ ржжрзЗржУрзЯрж╛ ржПржмржВ ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи ржкрж╛ржарж╛ржирзЛ
  const batch = db.batch();
  for (let i = 0; i < winners.length; i++) {
    const winner = winners[i];
    let reward = 0;

    if (i === 0) reward = 10; // Top 1
    else if (i === 1) reward = 5;  // Top 2
    else if (i === 2) reward = 2;  // Top 3
    else if (i >= 3 && i < 10) reward = 0.5; // Top 4-10

    if (reward > 0) {
      const winnerRef = usersRef.doc(winner.id);
      batch.update(winnerRef, { tonBalance: admin.firestore.FieldValue.increment(reward) });
      
      // ржмрж┐ржЬрзЯрзАржХрзЗ ржЕржнрж┐ржиржирзНржжржи ржмрж╛рж░рзНрждрж╛ ржкрж╛ржарж╛ржирзЛ
      const message = `ЁЯПЖ ржЕржнрж┐ржиржирзНржжржи, ${winner.name}! ЁЯПЖ\nржЖржкржирж┐ рж╕рж╛ржкрзНрждрж╛рж╣рж┐ржХ рж▓рж┐ржбрж╛рж░ржмрзЛрж░рзНржбрзЗ #${i + 1} рж╕рзНржерж╛ржи ржЕрж░рзНржЬржи ржХрж░рзЗ *${reward} TON* ржкрзБрж░рж╕рзНржХрж╛рж░ ржкрзЗрзЯрзЗржЫрзЗржи!`;
      bot.sendMessage(winner.id, message, { parse_mode: 'Markdown' }).catch(err => {
        console.log(`ржмрж┐ржЬрзЯрзАржХрзЗ (${winner.id}) ржмрж╛рж░рзНрждрж╛ ржкрж╛ржарж╛рждрзЗ ржмрзНржпрж░рзНрже:`, err.message);
      });
    }
  }
  await batch.commit();
  console.log(`${winners.length} ржЬржи ржмрж┐ржЬрзЯрзАржХрзЗ ржкрзБрж░рж╕рзНржХрж╛рж░ ржжрзЗржУрзЯрж╛ рж╣рзЯрзЗржЫрзЗред`);

  // рзи. рж▓рж┐ржбрж╛рж░ржмрзЛрж░рзНржб рж░рж┐рж╕рзЗржЯ ржХрж░рж╛
  console.log('рж╕ржмрж╛рж░ рж╕рж╛ржкрзНрждрж╛рж╣рж┐ржХ рж░рзЗржлрж╛рж░рзЗрж▓ рж╕ржВржЦрзНржпрж╛ рж░рж┐рж╕рзЗржЯ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...');
  const usersToResetSnapshot = await usersRef.where('weeklyReferralCount', '>', 0).get();
  
  if (!usersToResetSnapshot.empty) {
    const resetBatch = db.batch();
    usersToResetSnapshot.forEach(doc => {
      resetBatch.update(doc.ref, { weeklyReferralCount: 0 });
    });
    await resetBatch.commit();
    console.log(`${usersToResetSnapshot.size} ржЬржи ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ рж▓рж┐ржбрж╛рж░ржмрзЛрж░рзНржб рж░рж┐рж╕рзЗржЯ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред`);
  }

  console.log('рж╕рж╛ржкрзНрждрж╛рж╣рж┐ржХ рж▓рж┐ржбрж╛рж░ржмрзЛрж░рзНржб ржкрзНрж░ржХрзНрж░рж┐рзЯрж╛ рж╕ржлрж▓ржнрж╛ржмрзЗ рж╢рзЗрж╖ рж╣рзЯрзЗржЫрзЗред');
}

module.exports = { processWeeklyLeaderboard };